head	1.4;
access;
symbols;
locks; strict;
comment	@ * @;


1.4
date	2024.07.23.02.04.15;	author joao.vitor;	state Exp;
branches;
next	1.3;

1.3
date	2024.07.20.21.47.33;	author joao.vitor;	state Exp;
branches;
next	1.2;

1.2
date	2024.07.20.19.21.38;	author joao.vitor;	state Exp;
branches;
next	1.1;

1.1
date	2024.07.19.22.35.58;	author joao.vitor;	state Exp;
branches;
next	;


desc
@@


1.4
log
@alteracao de macro
@
text
@/*******************************************************************************
 *
 * Universidade Federal do Rio de Janeiro
 * Escola Politecnica
 * Departamento de Eletronica e de Computacao
 * Prof. Marcelo Luiz Drumond Lanza
 * EEL270 - Computacao II - Turma 2024/1
 *
 * Descricao: Codigo-Fonte de um programa de testes para as funcoes "MostrarMonitor", "ObterCodigoAnsiCor" e "GerarDistribuicaoInicial" .
 *
 * $Author: joao.vitor $
 * $Date: 2024/07/20 21:47:33 $
 * $Log: aula0702.c,v $
 * Revision 1.3  2024/07/20 21:47:33  joao.vitor
 * atualizacao da descricao
 *
 * Revision 1.2  2024/07/20 19:21:38  joao.vitor
 * correcao da variavel monitor
 *
 * Revision 1.1  2024/07/19 22:35:58  joao.vitor
 * Initial revision
 *
 *
 *******************************************************************************/

#if defined (__FreeBSD__) && defined (__STRICT_ANSI__)
#define __LONG_LONG_SUPPORTED
#endif

#ifdef __linux__
#define _XOPEN_SOURCE	600
#endif

/*Include's.*/
#include <stdlib.h>
#include <limits.h>
#include <errno.h>
#include <float.h>
#include "aula0701.h"

/*Definicao das Macros.*/
#define SUCESSO								0
#define NUMERO_ARGUMENTOS_VALIDOS					10
					
#define NUMERO_ARGUMENTOS_INVALIDOS					1
#define ARGUMENTO_INSERIDO_INVALIDO					2
#define NUMERO_ULTRAPASSOU_LIMITE_LONG					3
#define INSERIDO_NUMERO_NEGATIVO					4
#define NUMERO_ULTRAPASSOU_LIMITE_UNSIGNED				5
#define	NUMERO_LINHAS_E_COLUNAS_ULTRAPASSADO				6
#define	NUMERO_LINHAS_ULTRAPASSADO					7
#define	NUMERO_COLUNAS_ULTRAPASSADO					8
#define NUMERO_ULTRAPASSOU_LIMITE_LONG_DOUBLE				9
#define ERRO_TEMPO_DE_CONGELAMENTO_NEGATIVO				10
#define ERRO_TEMPO_DE_CONGELAMENTO_INVALIDO				11
#define ERRO_PERCENTUAL_DEFEITUOSOS_NEGATIVO				12
#define ERRO_PERCENTUAL_DEFEITUOSOS_INVALIDO				13
#define ERRO_PERCENTUAL_DEFEITUOSOS_ULTRAPASSOU_LIMITE_FLOAT		14
#define ERRO_PERCENTUAL_APAGADOS_NEGATIVO				15
#define ERRO_PERCENTUAL_APAGADOS_INVALIDO				16
#define ERRO_PERCENTUAL_APAGADOS_ULTRAPASSOU_LIMITE_FLOAT		17

#define END_OF_STRING							'\0'

/*Inicializacao da Funcao Principal.*/
int
main (int argc, char *argv [])
{
	/*Inicializacao das variaveis.*/
	useconds_t tempoDeCongelamentoConvertido;
	tipoPixel monitor [NUMERO_MAXIMO_LINHAS][NUMERO_MAXIMO_COLUNAS];
	unsigned tamanhoLinhasConvertido, tamanhoColunasConvertido;
	float percentualPixelsDefeituosos, percentualPixelsApagados;
	long tamanhoLinhasMatriz, tamanhoColunasMatriz;
	long tempoDeCongelamento;
	char *validacaoTamanhoLinhas, *validacaoTamanhoColunas;
	char *validacaoTempoDeCongelamento;
	char *validacaoPercentualDefeituosos, *validacaoPercentualApagados;

	/*Caso o numero de argumentos inseridos for invalido, aparecera uma mensagem de erro.*/
	if (argc != NUMERO_ARGUMENTOS_VALIDOS)
	{
		printf ("\n%sErro! Numero invalido de argumentos.%s\n", RED, RESET);
		printf ("%sUso: ./aula0702 <tempo-congelamento> <numero-linhas> <numero-colunas> <percentual-defeituosos> <percentual-apagados> <cor-fundo> <cor-apagado> <cor-aceso> <cor-defeituoso>%s\n\n", RED, RESET);
		exit (NUMERO_ARGUMENTOS_INVALIDOS);
	}
	
	/*Converte o tempo de congelamento inserido em um valor real do tipo long.*/
	tempoDeCongelamento = strtol (argv [1], &validacaoTempoDeCongelamento, 10);

	/*Caso o tempo de congelamento inserido nao for um numero, aparecera uma mensagem de erro.*/
	if (*validacaoTempoDeCongelamento != END_OF_STRING)
	{
		printf ("\n%sTempo de Congelamento Invalido.\nPor favor, insira um numero.%s\n\n", RED, RESET);
		exit (ERRO_TEMPO_DE_CONGELAMENTO_INVALIDO);
	}

	/*Caso o tempo de congelamento inserido for um numero negativo, aparecera uma mensagem de erro.*/
	if (argv [1][0] == '-')
	{
		printf ("\n%sTempo de Congelamento Invalido.\nPor favor, insira somente numeros positivos.%s\n\n", RED, RESET);
		exit (ERRO_TEMPO_DE_CONGELAMENTO_NEGATIVO);
	}

	/*Caso o tempo de congelamento inserido ultrapasse o limite do tipo long, aparecera uma mensagem de erro.*/	
	if (errno == ERANGE)
	{
		printf ("\n%sErro! O tempo de congelamento excedeu o limite do tipo Long (%ld).%s\n\n", RED, LONG_MAX, RESET); 
		exit (NUMERO_ULTRAPASSOU_LIMITE_LONG);
	}

	/*Armazena o valor da conversao de tipo do tempo de congelamento inserido (long para useconds_t).*/
	tempoDeCongelamentoConvertido = (useconds_t) tempoDeCongelamento;

	/*Converte o tamanho inserido em um valor real do tipo long.*/
	tamanhoLinhasMatriz = strtol (argv [2], &validacaoTamanhoLinhas, 10);
	
	/*Caso o tamanho inserido nao for um numero, aparecera uma mensagem de erro.*/
	if (*validacaoTamanhoLinhas != END_OF_STRING)
	{
		printf ("\n%sErro! Numero de Linhas Invalido.%s\n\n", RED, RESET);
		exit (ARGUMENTO_INSERIDO_INVALIDO);
	}
	
	/*Caso o numero de linhas inserido ultrapasse o limite do tipo long, aparecera uma mensagem de erro.*/	
	if (errno == ERANGE)
	{
		printf ("\n%sErro! O numero de linhas excedeu o limite do tipo Long (%ld).%s\n\n", RED, LONG_MAX, RESET); 
		exit (NUMERO_ULTRAPASSOU_LIMITE_LONG);
	}

	/*Caso os numeros de linhas e colunas forem negativos, aparecera uma mensagem de erro.*/
	if ((argv [2][0] == '-') && (argv [3][0] == '-'))
	{
		printf ("\n%sErro! Ambos os numeros de linhas e colunas sao invalidos.\nPor favor, insira somente numeros positivos.%s\n\n", RED, RESET);
		exit (INSERIDO_NUMERO_NEGATIVO);
	}	

	/*Caso somente o numeros de linhas for negativo, aparecera uma mensagem de erro.*/
	if ((argv [2][0] == '-') && (argv[3][0] != '-'))
	{
		printf ("\n%sErro! Numero de linhas invalido.\nPor favor, insira somente numeros positivos.%s\n\n", RED, RESET);
		exit (INSERIDO_NUMERO_NEGATIVO);
	}	

	/*Converte o tamanho inserido em um valor inteiro do tipo long.*/
	tamanhoColunasMatriz = strtol (argv [3], &validacaoTamanhoColunas, 10);
	
	/*Caso o tamanho inserido nao for um numero, aparecera uma mensagem de erro.*/
	if (*validacaoTamanhoColunas != END_OF_STRING)
	{
		printf ("\n%sErro! Numero de Colunas Invalido.%s\n\n", RED, RESET);
		exit (ARGUMENTO_INSERIDO_INVALIDO);
	}
		
	/*Caso o tamanho de colunas inserido ultrapasse o limite do tipo long, aparecera uma mensagem de erro.*/	
	if (errno == ERANGE)
	{
		printf ("\n%sErro! O numero de colunas excedeu o limite do tipo Long (%ld).%s\n\n", RED, LONG_MAX, RESET); 
		exit (NUMERO_ULTRAPASSOU_LIMITE_LONG);
	}
	
	/*Caso somente o numeros de colunas for negativo, aparecera uma mensagem de erro.*/
	if ((argv [2][0] != '-') && (argv[3][0] == '-'))
	{
		printf ("\n%sErro! Numero de colunas invalido.\nPor favor, insira somente numeros positivos.%s\n\n", RED, RESET);
		exit (INSERIDO_NUMERO_NEGATIVO);
	}	
	
	/*Caso o tamanho dos numeros de linhas e colunas inseridos estejam fora do limite do tipo unsigned, aparecera uma mensagem de erro.*/
	if ((tamanhoLinhasMatriz > UINT_MAX) && (tamanhoColunasMatriz > UINT_MAX))
	{ 
		printf ("\n%sErro! Os numeros de linhas e colunas ultrapassaram o limite do tipo Unsigned (%d).%s\n\n", RED, UINT_MAX, RESET);
		exit (NUMERO_ULTRAPASSOU_LIMITE_UNSIGNED);
	}

	/*Caso o tamanho do numero de linhas inserido esteja fora do limite do tipo unsigned, aparecera uma mensagem de erro.*/
	if (tamanhoLinhasMatriz > UINT_MAX) 
	{ 
		printf ("\n%sErro! O numero de linhas ultrapassou o limite do tipo Unsigned (%d).%s\n\n", RED, UINT_MAX, RESET);
		exit (NUMERO_ULTRAPASSOU_LIMITE_UNSIGNED);
	}

	/*Caso o tamanho do numero de colunas inserido esteja fora do limite do tipo unsigned, aparecera uma mensagem de erro.*/
	if (tamanhoColunasMatriz > UINT_MAX) 
	{ 
		printf ("\n%sErro! O numero de colunas ultrapassou o limite do tipo Unsigned (%d).%s\n\n", RED, UINT_MAX, RESET);
		exit (NUMERO_ULTRAPASSOU_LIMITE_UNSIGNED);
	}

	/*Armazena o valor da conversao de tipo do tamanho de linhas inserido (long para unsigned).*/
	tamanhoLinhasConvertido = (unsigned) tamanhoLinhasMatriz;
	
	/*Armazena o valor da conversao de tipo do tamanho de colunas inserido (long para unsigned).*/
	tamanhoColunasConvertido = (unsigned) tamanhoColunasMatriz;

	/*Condicao que verifica se os limites de linhas e colunas foram ultrapassados.*/
	if ((tamanhoLinhasConvertido > NUMERO_MAXIMO_LINHAS) && (tamanhoColunasConvertido > NUMERO_MAXIMO_COLUNAS))
	{
		printf ("\n%sErro! Numeros de linhas e colunas ultrapassaram o limite suportado%s", RED, RESET);
		printf ("\n%sPor favor, insira um numero de linhas que esteja entre 1 e %d.%s", RED, NUMERO_MAXIMO_LINHAS, RESET);
		printf ("\n%sPor favor, insira um numero de colunas que esteja entre 1 e %d.%s\n\n", RED, NUMERO_MAXIMO_COLUNAS, RESET);
		exit (NUMERO_LINHAS_E_COLUNAS_ULTRAPASSADO);
	}
	
	/*Condicao que verifica se somente o numero maximo de linhas foi ultrapassado.*/
	if (tamanhoLinhasConvertido > NUMERO_MAXIMO_LINHAS)
	{
		printf ("\n%sErro! Numero de linhas invalido.\nPor favor, insira um numero que esteja entre 1 e %d.%s\n\n", RED, NUMERO_MAXIMO_LINHAS, RESET);
		exit (NUMERO_LINHAS_ULTRAPASSADO);
	}

	/*Condicao que verifica se somente o numero maximo de colunas foi ultrapassado.*/
	if (tamanhoColunasConvertido > NUMERO_MAXIMO_COLUNAS)
	{
		printf ("\n%sErro! Numero de colunas invalido.\nPor favor, insira um numero de colunas que esteja entre 1 e %d.%s\n\n", RED, NUMERO_MAXIMO_COLUNAS, RESET);
		exit (NUMERO_COLUNAS_ULTRAPASSADO);
	}

	/*Converte o percentual de pixels defeituosos inserido em um valor do tipo float.*/
	percentualPixelsDefeituosos = strtof (argv [4], &validacaoPercentualDefeituosos);
	
	/*Caso o tamanho inserido nao for um numero, aparecera uma mensagem de erro.*/
	if (*validacaoPercentualDefeituosos != END_OF_STRING)
	{
		printf ("\n%sErro! Percentual de Pixels Defeituosos Invalido.%s\n\n", RED, RESET);
		exit (ERRO_PERCENTUAL_DEFEITUOSOS_INVALIDO);
	}
	
	/*Caso o percentual de pixels defeituosos inserido for um numero negativo, aparecera uma mensagem de erro.*/
	if (argv [4][0] == '-')
	{
		printf ("\n%sPercentual de Pixels Defeituosos Invalido.\nPor favor, insira somente numeros positivos.%s\n\n", RED, RESET);
		exit (ERRO_PERCENTUAL_DEFEITUOSOS_NEGATIVO);
	}

	/*Caso o percentual de pixels defeituosos inserido ultrapasse o limite do tipo float, aparecera uma mensagem de erro.*/	
	if (errno == ERANGE)
	{
		printf ("\n%sErro! O percentual de pixels defeituosos excedeu o limite do tipo Float (%f).%s\n\n", RED, FLT_MAX, RESET); 
		exit (ERRO_PERCENTUAL_DEFEITUOSOS_ULTRAPASSOU_LIMITE_FLOAT);
	}

	/*Converte o percentual de pixels apagados inserido em um valor do tipo float.*/
	percentualPixelsApagados = strtof (argv [5], &validacaoPercentualApagados);
	
	/*Caso o tamanho inserido nao for um numero, aparecera uma mensagem de erro.*/
	if (*validacaoPercentualApagados != END_OF_STRING)
	{
		printf ("\n%sErro! Percentual de Pixels Apagados Invalido.%s\n\n", RED, RESET);
		exit (ERRO_PERCENTUAL_APAGADOS_INVALIDO);
	}
	
	/*Caso o percentual de pixels apagados inserido for um numero negativo, aparecera uma mensagem de erro.*/
	if (argv [5][0] == '-')
	{
		printf ("\n%sPercentual de Pixels Apagados Invalido.\nPor favor, insira somente numeros positivos.%s\n\n", RED, RESET);
		exit (ERRO_PERCENTUAL_APAGADOS_NEGATIVO);
	}

	/*Caso o percentual de pixels apagados inserido ultrapasse o limite do tipo float, aparecera uma mensagem de erro.*/	
	if (errno == ERANGE)
	{
		printf ("\n%sErro! O percentual de pixels apagados excedeu o limite do tipo Float (%f).%s\n\n", RED, FLT_MAX, RESET); 
		exit (ERRO_PERCENTUAL_APAGADOS_ULTRAPASSOU_LIMITE_FLOAT);
	}

	/*Chamada da funcao "GerarDistribuicaoInicial".*/
	GerarDistribuicaoInicial (monitor, tamanhoLinhasConvertido, tamanhoColunasConvertido, percentualPixelsDefeituosos, percentualPixelsApagados);

	/*Chamada da funcao "MostrarMonitor".*/
	MostrarMonitor (tempoDeCongelamentoConvertido, monitor, tamanhoLinhasConvertido, tamanhoColunasConvertido, argv [6], argv [7], argv [8], argv [9]);

	return SUCESSO;
}


/* $RCSfile: aula0702.c,v $ */
@


1.3
log
@atualizacao da descricao
@
text
@d12 1
a12 1
 * $Date: 2024/07/20 19:21:38 $
d14 3
d31 1
a31 1
#define _XOPEN_SOURCE	500
@


1.2
log
@correcao da variavel monitor
@
text
@d9 1
a9 1
 * Descricao: Codigo-Fonte de um programa de testes para a funcao "ExibirMatriz".
d12 1
a12 1
 * $Date: 2024/07/19 22:35:58 $
d14 3
@


1.1
log
@Initial revision
@
text
@d11 6
a16 3
 * $Author$
 * $Date$
 * $Log$
a63 1
	us linha, coluna;
d65 1
a213 11
	/*Inicializacao da matriz monitor com seus elementos apagados.*/
	tipoPixel monitor [tamanhoLinhasConvertido][tamanhoColunasConvertido];

	for (linha = 1; linha <= tamanhoLinhasConvertido; linha++)
	{
		for (coluna = 1; coluna <= tamanhoColunasConvertido; coluna++)
		{
			monitor [linha-1][coluna-1] = apagado;
		}
	}

d272 1
a272 1
/* $RCSfile$ */
@
